generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  skinType      String?
  skinConcerns  String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  analyses      SkinAnalysis[]
  conversations Conversation[]
  orders        Order[]
  
  @@index([email])
}

model SkinAnalysis {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  imageUrl        String
  skinQualityScore Float?
  acneLevel       String?
  darkCircles     String?
  poresLevel      String?
  wrinkleLevel    String?
  skinTone        String?
  concerns        String[]
  recommendations String[]
  
  createdAt       DateTime @default(now())
  
  @@index([userId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  skinTypes   String[]
  concerns    String[]
  ingredients String[]
  imageUrl    String?
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderItems  OrderItem[]
  
  @@index([category])
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  role           String       // 'user' or 'assistant'
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  
  @@index([conversationId])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  items           OrderItem[]
  totalAmount     Float
  status          String      @default("pending") // pending, paid, shipped, delivered
  shippingAddress Json
  paymentIntent   String?     // Stripe payment intent ID
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  quantity  Int
  price     Float   // Price at time of purchase
  
  @@index([orderId])
}